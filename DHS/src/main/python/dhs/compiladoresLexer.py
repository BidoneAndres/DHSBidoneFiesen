# Generated from /home/andres/Documents/DHS/DHSBidoneFiesen/DHS/src/main/python/dhs/compiladores.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,222,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,4,9,105,8,9,11,9,12,9,106,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,
        34,1,35,1,35,3,35,203,8,35,1,35,1,35,1,35,5,35,208,8,35,10,35,12,
        35,211,9,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,0,
        0,40,1,0,3,0,5,1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,
        11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,
        22,49,23,51,24,53,25,55,26,57,27,59,28,61,29,63,30,65,31,67,32,69,
        33,71,34,73,35,75,36,77,37,79,38,1,0,3,2,0,65,90,97,122,1,0,48,57,
        3,0,9,10,13,13,32,32,224,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,1,81,
        1,0,0,0,3,83,1,0,0,0,5,85,1,0,0,0,7,87,1,0,0,0,9,89,1,0,0,0,11,91,
        1,0,0,0,13,93,1,0,0,0,15,95,1,0,0,0,17,97,1,0,0,0,19,104,1,0,0,0,
        21,108,1,0,0,0,23,112,1,0,0,0,25,115,1,0,0,0,27,120,1,0,0,0,29,127,
        1,0,0,0,31,131,1,0,0,0,33,138,1,0,0,0,35,143,1,0,0,0,37,149,1,0,
        0,0,39,156,1,0,0,0,41,161,1,0,0,0,43,166,1,0,0,0,45,168,1,0,0,0,
        47,170,1,0,0,0,49,172,1,0,0,0,51,174,1,0,0,0,53,176,1,0,0,0,55,178,
        1,0,0,0,57,181,1,0,0,0,59,184,1,0,0,0,61,186,1,0,0,0,63,188,1,0,
        0,0,65,191,1,0,0,0,67,194,1,0,0,0,69,196,1,0,0,0,71,202,1,0,0,0,
        73,212,1,0,0,0,75,215,1,0,0,0,77,218,1,0,0,0,79,220,1,0,0,0,81,82,
        7,0,0,0,82,2,1,0,0,0,83,84,7,1,0,0,84,4,1,0,0,0,85,86,5,40,0,0,86,
        6,1,0,0,0,87,88,5,41,0,0,88,8,1,0,0,0,89,90,5,123,0,0,90,10,1,0,
        0,0,91,92,5,125,0,0,92,12,1,0,0,0,93,94,5,59,0,0,94,14,1,0,0,0,95,
        96,5,44,0,0,96,16,1,0,0,0,97,98,5,119,0,0,98,99,5,104,0,0,99,100,
        5,105,0,0,100,101,5,108,0,0,101,102,5,101,0,0,102,18,1,0,0,0,103,
        105,3,3,1,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,
        107,1,0,0,0,107,20,1,0,0,0,108,109,5,102,0,0,109,110,5,111,0,0,110,
        111,5,114,0,0,111,22,1,0,0,0,112,113,5,105,0,0,113,114,5,102,0,0,
        114,24,1,0,0,0,115,116,5,101,0,0,116,117,5,108,0,0,117,118,5,115,
        0,0,118,119,5,101,0,0,119,26,1,0,0,0,120,121,5,114,0,0,121,122,5,
        101,0,0,122,123,5,116,0,0,123,124,5,117,0,0,124,125,5,114,0,0,125,
        126,5,110,0,0,126,28,1,0,0,0,127,128,5,105,0,0,128,129,5,110,0,0,
        129,130,5,116,0,0,130,30,1,0,0,0,131,132,5,100,0,0,132,133,5,111,
        0,0,133,134,5,117,0,0,134,135,5,98,0,0,135,136,5,108,0,0,136,137,
        5,101,0,0,137,32,1,0,0,0,138,139,5,99,0,0,139,140,5,104,0,0,140,
        141,5,97,0,0,141,142,5,114,0,0,142,34,1,0,0,0,143,144,5,102,0,0,
        144,145,5,108,0,0,145,146,5,111,0,0,146,147,5,97,0,0,147,148,5,116,
        0,0,148,36,1,0,0,0,149,150,5,83,0,0,150,151,5,116,0,0,151,152,5,
        114,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,155,5,103,0,0,155,
        38,1,0,0,0,156,157,5,98,0,0,157,158,5,111,0,0,158,159,5,111,0,0,
        159,160,5,108,0,0,160,40,1,0,0,0,161,162,5,118,0,0,162,163,5,111,
        0,0,163,164,5,105,0,0,164,165,5,100,0,0,165,42,1,0,0,0,166,167,5,
        43,0,0,167,44,1,0,0,0,168,169,5,45,0,0,169,46,1,0,0,0,170,171,5,
        42,0,0,171,48,1,0,0,0,172,173,5,47,0,0,173,50,1,0,0,0,174,175,5,
        37,0,0,175,52,1,0,0,0,176,177,5,61,0,0,177,54,1,0,0,0,178,179,5,
        61,0,0,179,180,5,61,0,0,180,56,1,0,0,0,181,182,5,33,0,0,182,183,
        5,61,0,0,183,58,1,0,0,0,184,185,5,60,0,0,185,60,1,0,0,0,186,187,
        5,62,0,0,187,62,1,0,0,0,188,189,5,60,0,0,189,190,5,61,0,0,190,64,
        1,0,0,0,191,192,5,62,0,0,192,193,5,61,0,0,193,66,1,0,0,0,194,195,
        5,39,0,0,195,68,1,0,0,0,196,197,7,2,0,0,197,198,1,0,0,0,198,199,
        6,34,0,0,199,70,1,0,0,0,200,203,3,1,0,0,201,203,5,95,0,0,202,200,
        1,0,0,0,202,201,1,0,0,0,203,209,1,0,0,0,204,208,3,1,0,0,205,208,
        3,3,1,0,206,208,5,95,0,0,207,204,1,0,0,0,207,205,1,0,0,0,207,206,
        1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,72,1,
        0,0,0,211,209,1,0,0,0,212,213,5,124,0,0,213,214,5,124,0,0,214,74,
        1,0,0,0,215,216,5,38,0,0,216,217,5,38,0,0,217,76,1,0,0,0,218,219,
        5,33,0,0,219,78,1,0,0,0,220,221,9,0,0,0,221,80,1,0,0,0,5,0,106,202,
        207,209,1,6,0,0
    ]

class compiladoresLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    COM = 6
    WHILE = 7
    NUMERO = 8
    FOR = 9
    IF = 10
    ELSE = 11
    RETURN = 12
    INT = 13
    DOUBLE = 14
    CHAR = 15
    FLOAT = 16
    STRING = 17
    BOOLEAN = 18
    VOID = 19
    SUMA = 20
    RESTA = 21
    MULT = 22
    DIV = 23
    MOD = 24
    ASIG = 25
    EQQ = 26
    NE = 27
    LT = 28
    GT = 29
    LE = 30
    GE = 31
    SIMP = 32
    WS = 33
    ID = 34
    ORR = 35
    AND = 36
    NOT = 37
    OTRO = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "','", "'while'", "'for'", 
            "'if'", "'else'", "'return'", "'int'", "'double'", "'char'", 
            "'float'", "'String'", "'bool'", "'void'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'='", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'''", "'||'", "'&&'", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "COM", "WHILE", "NUMERO", "FOR", 
            "IF", "ELSE", "RETURN", "INT", "DOUBLE", "CHAR", "FLOAT", "STRING", 
            "BOOLEAN", "VOID", "SUMA", "RESTA", "MULT", "DIV", "MOD", "ASIG", 
            "EQQ", "NE", "LT", "GT", "LE", "GE", "SIMP", "WS", "ID", "ORR", 
            "AND", "NOT", "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "COM", 
                  "WHILE", "NUMERO", "FOR", "IF", "ELSE", "RETURN", "INT", 
                  "DOUBLE", "CHAR", "FLOAT", "STRING", "BOOLEAN", "VOID", 
                  "SUMA", "RESTA", "MULT", "DIV", "MOD", "ASIG", "EQQ", 
                  "NE", "LT", "GT", "LE", "GE", "SIMP", "WS", "ID", "ORR", 
                  "AND", "NOT", "OTRO" ]

    grammarFileName = "compiladores.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


